https://www.bigocheatsheet.com

Big O is divided into TIME and Space complexity

what is space complixity ?
    Space complexity is a way to describe how the memory usage of an algorithm changes as the size of the input changes.
    It gives an upper bound on the amount of memory an algorithm will use, expressed in terms of the size of the input 
    (usually denoted as n).
what is time complixity ?
    Time complexity is a way to describe how the runtime of an algorithm changes as the size of the input changes.
    It gives an upper bound on the time an algorithm will take to complete, expressed in terms of the size of the input 
    (usually denoted as n).
Common space complexities include:
    O(1): Constant space - the algorithm uses the same amount of memory regardless of the input size.
    O(log n): Logarithmic space - the algorithm's memory usage grows logarithmically with the input size.
    O(n): Linear space - the algorithm's memory usage grows linearly with the input size.
    O(n log n): Linearithmic space - the algorithm's memory usage grows in proportion to n log n.
    O(n^2): Quadratic space - the algorithm's memory usage grows proportionally to the square of the input size.
    O(2^n): Exponential space - the algorithm's memory usage doubles with each additional element in the input.
Common time complexities include:
    O(1): Constant time - the algorithm takes the same amount of time regardless of the input size.
    O(log n): Logarithmic time - the algorithm's runtime grows logarithmically with the input size.
    O(n): Linear time - the algorithm's runtime grows linearly with the input size.
    O(n log n): Linearithmic time - the algorithm's runtime grows in proportion to n log n.
    O(n^2): Quadratic time - the algorithm's runtime grows proportionally to the square of the input size.
    O(2^n): Exponential time - the algorithm's runtime doubles with each additional element in the input.

Different term for input
Drop non dominants
Drop Constants